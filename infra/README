# Onboarding for development deployments

This is a one time setup that enables you to deploy applications to a development AWS account for testing.

This bootstraps the development account with your personal VPC. Then when you deploy other services, they will use this VPC.

1. `cd infra/bootstrap`
2. `export DEV_NAME="<your name>"`
3. `pulumi login --local`
4. `pulumi stack init services-dev`
5. `pulumi install`
6. Login in development account using `aws-vault`
7. `pulumi up`

Now deploy the sample project to check everything is working:

1. `cd infra/sample`
2. `pulumi login --local && pulumi stack init dev`
3. `pulumi up`

# Creating a new project

These steps create a new project with a dev stack for deploying to the development account.

1. Vault in as developer admin
2. `pulumi login --local`
3. `mkdir <project_name> && cd <project_name>`
4. `pulumi new aws-typescript --name <project_name> --stack dev --yes`
5. `git add -u && git commit -m "Initialize <project_name>"`
6. Add `Pulumi.dev.yaml` to `.gitignore`
7. `git add -u && git commit -m ".gitignore"`
8. Modify `package.json` to add a script that builds using `tsc`. This is used by Github Actions CI. Add:
   ```
    "scripts": {
        "build": "tsc"
    }
   ```

## Deploying to staging and prod

Once the dev stack is stable, these steps create staging and prod stacks in preparation for deployment to the staging/prod environments.

Requires Ops Admin permissions. Create staging and prod stacks requires accessing the Pulumi state bucket and Pulumi KMS key for encrypting secrets.

7. `pulumi login "s3://boundless-pulumi-state?region=us-west-2&awssdk=v2"` 
8. `pulumi stack init --secrets-provider="awskms:///arn:aws:kms:us-west-2:968153779208:alias/pulumi-secrets-key" staging-11155111`
9. `pulumi stack init --secrets-provider="awskms:///arn:aws:kms:us-west-2:968153779208:alias/pulumi-secrets-key" prod`
10. Set your secrets using `pulumi config set --secret <NAME> <VALUE>`